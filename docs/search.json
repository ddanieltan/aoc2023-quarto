[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "üéÖüèº Advent of Code 2023",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nDay 1: Trebuchet?!\n\n\n\n\n\n\n\n\n\n\n\nDay 2: Cube Conundrum\n\n\n\n\n\n\n\n\n\n\n\nDay 3: Gear Ratios\n\n\n\n\n\n\n\n\n\n\n\nDay 4: Scratchcards\n\n\n\n\n\n\n\n\n\n\n\nDay 5: If You Give A Seed A Fertilizer\n\n\n\n\n\n\n\n\n\n\n\nDay 6: Wait For It\n\n\n\n\n\n\n\n\n\n\n\nDay 7: Camel Cards\n\n\n\n\n\n\n\n\n\n\n\nDay 8: Haunted Wasteland\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "day/01/index.html#part-1",
    "href": "day/01/index.html#part-1",
    "title": "Day 1: Trebuchet?!",
    "section": "Part 1",
    "text": "Part 1\nThe newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.\nFor example:\n1abc2\npqr3stu8vwx\na1b2c3d4e5f\ntreb7uchet\nIn this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.\nConsider your entire calibration document. What is the sum of all of the calibration values?\n\nfrom typing import List\n\nexample = [\"1abc2\",\n    \"pqr3stu8vwx\",\n    \"a1b2c3d4e5f\",\n    \"treb7uchet\"]\n\ndef get_num(s:str) -&gt; int:\n    nums = [ch for ch in [*s] if ch.isdigit()]\n    return int(nums[0]+nums[-1])\n\ndef calibration_sum(inp:List[str]) -&gt; int:\n    nums = map(get_num, inp)\n    return sum(nums)\n\ncalibration_sum(example)\n\n142\n\n\n\nwith open(\"./input.txt\") as f:\n    inp = f.read().splitlines()\n\ncalibration_sum(inp)\n\n55488"
  },
  {
    "objectID": "day/01/index.html#part-2",
    "href": "day/01/index.html#part-2",
    "title": "Day 1: Trebuchet?!",
    "section": "Part 2",
    "text": "Part 2\nYour calculation isn‚Äôt quite right. It looks like some of the digits are actually spelled out with letters: one, two, three, four, five, six, seven, eight, and nine also count as valid ‚Äúdigits‚Äù.\nEquipped with this new information, you now need to find the real first and last digit on each line. For example:\neightwothree\nabcone2threexyz\nxtwone3four\n4nineeightseven2\nzoneight234\n7pqrstsixteen\nIn this example, the calibration values are 29, 83, 13, 24, 42, 14, and 76. Adding these together produces 281.\nWhat is the sum of all of the calibration values?\n\nMAPPINGS = {\n    \"one\":\"1\",\n    \"two\":\"2\",\n    \"three\":\"3\",\n    \"four\":\"4\",\n    \"five\":\"5\",\n    \"six\":\"6\",\n    \"seven\":\"7\",\n    \"eight\":\"8\",\n    \"nine\":\"9\"\n}\n\nexample2 = [\n    \"two1nine\",\n    \"eightwothree\",\n    \"abcone2threexyz\",\n    \"xtwone3four\",\n    \"4nineeightseven2\",\n    \"zoneight234\",\n    \"7pqrstsixteen\"\n    ]\n\n\ndef parse_num(s:str, direction:bool) -&gt; str:\n    curr = \"\"\n\n    # Forward direction = True\n    if direction:\n        for ch in s:\n            if ch.isdigit():\n                return ch\n            else:\n                curr += ch \n                for k,v in MAPPINGS.items():\n                    if k in curr:\n                        return v\n    # Reverse direction\n    else:\n        for ch in reversed(s):\n            if ch.isdigit():\n                return ch\n            else:\n                curr = ch + curr \n                for k,v in MAPPINGS.items():\n                    if k in curr:\n                        return v\n\nprint(parse_num(\"eightwothree\", True))\nprint(parse_num(\"eightwothree\", False))\n\n8\n3\n\n\n\ndef get_num2(s:str) -&gt; int:\n    first = parse_num(s, True)\n    last = parse_num(s, False)\n    return int(first + last)\n\ndef calibration_sum2(inp:List[str]) -&gt; int:\n    nums = map(get_num2, inp)\n    return sum(nums)\n\ncalibration_sum2(example2)\n\n281\n\n\n\ncalibration_sum2(inp)\n\n55614"
  },
  {
    "objectID": "day/01/index.html#til",
    "href": "day/01/index.html#til",
    "title": "Day 1: Trebuchet?!",
    "section": "TIL",
    "text": "TIL\n\n[*string] converts a string into a list of elements\n\ns = \"1abc2\"\n[*s]\n\n['1', 'a', 'b', 'c', '2']"
  },
  {
    "objectID": "day/08/index.html#part-1",
    "href": "day/08/index.html#part-1",
    "title": "Day 8: Haunted Wasteland",
    "section": "Part 1",
    "text": "Part 1\nIt seems like you‚Äôre meant to use the left/right instructions to navigate the network. Perhaps if you have the camel follow the same instructions, you can escape the haunted wasteland!\nAfter examining the maps for a bit, two nodes stick out: AAA and ZZZ. You feel like AAA is where you are now, and you have to follow the left/right instructions until you reach ZZZ.\nThis format defines each node of the network individually. For example:\nRL\n\nAAA = (BBB, CCC)\nBBB = (DDD, EEE)\nCCC = (ZZZ, GGG)\nDDD = (DDD, DDD)\nEEE = (EEE, EEE)\nGGG = (GGG, GGG)\nZZZ = (ZZZ, ZZZ)\nStarting with AAA, you need to look up the next element based on the next left/right instruction in your input. In this example, start with AAA and go right (R) by choosing the right element of AAA, CCC. Then, L means to choose the left element of CCC, ZZZ. By following the left/right instructions, you reach ZZZ in 2 steps.\nOf course, you might not find ZZZ right away. If you run out of left/right instructions, repeat the whole sequence of instructions as necessary: RL really means RLRLRLRLRLRLRLRL‚Ä¶ and so on. For example, here is a situation that takes 6 steps to reach ZZZ:\nLLR\n\nAAA = (BBB, BBB)\nBBB = (AAA, ZZZ)\nZZZ = (ZZZ, ZZZ)\nStarting at AAA, follow the left/right instructions. How many steps are required to reach ZZZ?\n\nexample1 = \"\"\"RL\nAAA = (BBB, CCC)\nBBB = (DDD, EEE)\nCCC = (ZZZ, GGG)\nDDD = (DDD, DDD)\nEEE = (EEE, EEE)\nGGG = (GGG, GGG)\nZZZ = (ZZZ, ZZZ)\"\"\"\n\nexample2 = \"\"\"LLR\nAAA = (BBB, BBB)\nBBB = (AAA, ZZZ)\nZZZ = (ZZZ, ZZZ)\"\"\"\n\n\nimport re\nfrom typing import Tuple\n\ndef parse(inp:str) -&gt; Tuple[str,dict]:\n    instructions = inp.splitlines()[0]\n    blob = inp.splitlines()[1:]\n    mappings = {}\n    for line in blob:\n        r = re.findall(r\"(\\w+)\", line)\n        mappings[r[0]] = (r[1],r[2])\n    return instructions, mappings\n\n    \ndef part1(inp:str) -&gt; int:\n    num_steps = 0\n    instructions, mappings = parse(inp)\n    \n    current = \"AAA\"\n    while current != \"ZZZ\":\n        idx = num_steps % len(instructions)\n        letter = instructions[idx]\n        if letter == \"L\":\n            current = mappings[current][0]\n        elif letter == \"R\":\n            current = mappings[current][1]\n        \n        num_steps += 1\n    return num_steps\n\nprint(f\"Example 1 : {part1(example1)}\")\nprint(f\"Example 2 : {part1(example2)}\")\n\nExample 1 : 2\nExample 2 : 6\n\n\n\nwith open(\"./input.txt\") as f:\n    inp = f.read()\n\npart1(inp)\n\n11309"
  },
  {
    "objectID": "day/08/index.html#part-2",
    "href": "day/08/index.html#part-2",
    "title": "Day 8: Haunted Wasteland",
    "section": "Part 2",
    "text": "Part 2\nAfter examining the maps a bit longer, your attention is drawn to a curious fact: the number of nodes with names ending in A is equal to the number ending in Z! If you were a ghost, you‚Äôd probably just start at every node that ends with A and follow all of the paths at the same time until they all simultaneously end up at nodes that end with Z.\nFor example:\nLR\n\n11A = (11B, XXX)\n11B = (XXX, 11Z)\n11Z = (11B, XXX)\n22A = (22B, XXX)\n22B = (22C, 22C)\n22C = (22Z, 22Z)\n22Z = (22B, 22B)\nXXX = (XXX, XXX)\nHere, there are two starting nodes, 11A and 22A (because they both end with A). As you follow each left/right instruction, use that instruction to simultaneously navigate away from both nodes you‚Äôre currently on. Repeat this process until all of the nodes you‚Äôre currently on end with Z. (If only some of the nodes you‚Äôre on end with Z, they act like any other node and you continue as normal.) In this example, you would proceed as follows:\n\nStep 0: You are at 11A and 22A.\nStep 1: You choose all of the left paths, leading you to 11B and 22B.\nStep 2: You choose all of the right paths, leading you to 11Z and 22C.\nStep 3: You choose all of the left paths, leading you to 11B and 22Z.\nStep 4: You choose all of the right paths, leading you to 11Z and 22B.\nStep 5: You choose all of the left paths, leading you to 11B and 22C.\nStep 6: You choose all of the right paths, leading you to 11Z and 22Z. So, in this example, you end up entirely on nodes that end in Z after 6 steps.\n\nSimultaneously start on every node that ends with A. How many steps does it take before you‚Äôre only on nodes that end with Z?\n\nimport math\n\nexample3 = \"\"\"LR\n\n11A = (11B, XXX)\n11B = (XXX, 11Z)\n11Z = (11B, XXX)\n22A = (22B, XXX)\n22B = (22C, 22C)\n22C = (22Z, 22Z)\n22Z = (22B, 22B)\nXXX = (XXX, XXX)\"\"\"\n\ndef part2(inp:str) -&gt; int:\n    num_steps = 0\n    instructions, mappings = parse(inp)\n    starting = [k for k in mappings if k[2]==\"A\"]\n    steps_to_z = []\n\n    for key in starting:\n        current = key\n        num_steps = 0\n        while not current.endswith(\"Z\"):\n            idx = num_steps % len(instructions)\n            letter = instructions[idx]\n            num_steps += 1\n            if letter == \"L\":\n                current = mappings[current][0]\n            elif letter == \"R\":\n                current = mappings[current][1]\n        steps_to_z.append(num_steps)\n\n    return math.lcm(*steps_to_z)\n\n#part2(example3) #6\npart2(inp)\n\n13740108158591"
  },
  {
    "objectID": "day/08/index.html#til",
    "href": "day/08/index.html#til",
    "title": "Day 8: Haunted Wasteland",
    "section": "TIL",
    "text": "TIL\n\npythex.org\nA useful online regex constructor for Python re module\n\n\nstr.endswith() useful method to check what character a string ends with\nstartswith() also exists!\n\nprint(\"ABC\".endswith(\"Z\"))\nprint(\"ABC\".endswith(\"C\"))\n\nFalse\nTrue"
  },
  {
    "objectID": "day/06/index.html#part-1",
    "href": "day/06/index.html#part-1",
    "title": "Day 6: Wait For It",
    "section": "Part 1",
    "text": "Part 1\nFor example:\nTime:      7  15   30\nDistance:  9  40  200\nThis document describes three races:\nThe first race lasts 7 milliseconds. The record distance in this race is 9 millimeters. The second race lasts 15 milliseconds. The record distance in this race is 40 millimeters. The third race lasts 30 milliseconds. The record distance in this race is 200 millimeters. Your toy boat has a starting speed of zero millimeters per millisecond. For each whole millisecond you spend at the beginning of the race holding down the button, the boat‚Äôs speed increases by one millimeter per millisecond.\nSo, because the first race lasts 7 milliseconds, you only have a few options:\nDon‚Äôt hold the button at all (that is, hold it for 0 milliseconds) at the start of the race. The boat won‚Äôt move; it will have traveled 0 millimeters by the end of the race. Hold the button for 1 millisecond at the start of the race. Then, the boat will travel at a speed of 1 millimeter per millisecond for 6 milliseconds, reaching a total distance traveled of 6 millimeters. Hold the button for 2 milliseconds, giving the boat a speed of 2 millimeters per millisecond. It will then get 5 milliseconds to move, reaching a total distance of 10 millimeters. Hold the button for 3 milliseconds. After its remaining 4 milliseconds of travel time, the boat will have gone 12 millimeters. Hold the button for 4 milliseconds. After its remaining 3 milliseconds of travel time, the boat will have gone 12 millimeters. Hold the button for 5 milliseconds, causing the boat to travel a total of 10 millimeters. Hold the button for 6 milliseconds, causing the boat to travel a total of 6 millimeters. Hold the button for 7 milliseconds. That‚Äôs the entire duration of the race. You never let go of the button. The boat can‚Äôt move until you let go of the button. Please make sure you let go of the button so the boat gets to move. 0 millimeters. Since the current record for this race is 9 millimeters, there are actually 4 different ways you could win: you could hold the button for 2, 3, 4, or 5 milliseconds at the start of the race.\nIn the second race, you could hold the button for at least 4 milliseconds and at most 11 milliseconds and beat the record, a total of 8 different ways to win.\nIn the third race, you could hold the button for at least 11 milliseconds and no more than 19 milliseconds and still beat the record, a total of 9 ways you could win.\nTo see how much margin of error you have, determine the number of ways you can beat the record in each race; in this example, if you multiply these values together, you get 288 (4 * 8 * 9).\nDetermine the number of ways you could beat the record in each race. What do you get if you multiply these numbers together?\n\nexample = \"\"\"Time:      7  15   30\nDistance:  9  40  200\"\"\"\nexample\n\n'Time:      7  15   30\\nDistance:  9  40  200'\n\n\n\nimport re\nimport math\nfrom typing import List, Tuple\n\ndef parse_input(inp:str)-&gt;Tuple[List[int],List[int]]:\n    time_raw = inp.splitlines()[0]\n    time = re.findall(r\"\\d+\", time_raw) \n    time = [int(t) for t in time]\n    \n    distance_raw = inp.splitlines()[1]\n    distance = re.findall(r\"\\d+\", distance_raw)\n    distance = [int(d) for d in distance] \n    \n    return (time, distance)\n\ndef ways_to_win(time:int, dist:int) -&gt; int:\n    count = 0\n    for t in range(1,time):\n        move = t * (time-t)\n        if move &gt; dist:\n            count += 1\n    return count\n\ndef part1(inp:str):\n    time, distance = parse_input(inp)\n    wins = [ways_to_win(t,d) for t, d in zip(time,distance)]\n    return math.prod(wins)\n\npart1(example)\n\n288\n\n\n\nwith open(\"./input.txt\") as f:\n    inp = f.read()\npart1(inp)\n\n138915"
  },
  {
    "objectID": "day/06/index.html#part-2",
    "href": "day/06/index.html#part-2",
    "title": "Day 6: Wait For It",
    "section": "Part 2",
    "text": "Part 2\nSo, the example from before:\nTime:      7  15   30\nDistance:  9  40  200\n‚Ä¶now instead means this:\nTime:      71530\nDistance:  940200\nNow, you have to figure out how many ways there are to win this single race. In this example, the race lasts for 71530 milliseconds and the record distance you need to beat is 940200 millimeters. You could hold the button anywhere from 14 to 71516 milliseconds and beat the record, a total of 71503 ways!\nHow many ways can you beat the record in this one much longer race?\n\ndef parse_input2(inp:str) -&gt; Tuple[int,int]:\n    time_raw = inp.splitlines()[0]\n    time = \"\".join(re.findall(r\"\\d+\", time_raw)) \n    time = int(time)\n    \n    distance_raw = inp.splitlines()[1]\n    distance = \"\".join(re.findall(r\"\\d+\", distance_raw))\n    distance = int(distance)\n    \n    return (time, distance)\n\ndef part2(inp:str):\n    time, distance = parse_input2(inp)\n    return ways_to_win(time,distance)\n\npart2(example)\n\n71503\n\n\n\npart2(inp)\n\n27340847"
  },
  {
    "objectID": "day/06/index.html#til",
    "href": "day/06/index.html#til",
    "title": "Day 6: Wait For It",
    "section": "TIL",
    "text": "TIL\n\nGet product of a List\n\nUsing math.prod\n\n\nimport math\nlst = [3,53,64,23]\nmath.prod(lst)\n\n234048\n\n\n\nUsing functools.reduce\n\n\nimport functools\nlst = [3,53,64,23]\nfunctools.reduce((lambda x, y : x * y), lst)\n\n234048"
  }
]