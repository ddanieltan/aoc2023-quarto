[
  {
    "objectID": "day/01/index.html#part-1",
    "href": "day/01/index.html#part-1",
    "title": "Day 1: Trebuchet?!",
    "section": "Part 1",
    "text": "Part 1\nThe newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.\nFor example:\n1abc2\npqr3stu8vwx\na1b2c3d4e5f\ntreb7uchet\nIn this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.\nConsider your entire calibration document. What is the sum of all of the calibration values?\n\nfrom typing import List\n\nexample = [\"1abc2\",\n    \"pqr3stu8vwx\",\n    \"a1b2c3d4e5f\",\n    \"treb7uchet\"]\n\ndef get_num(s:str) -&gt; int:\n    nums = [ch for ch in [*s] if ch.isdigit()]\n    return int(nums[0]+nums[-1])\n\ndef calibration_sum(inp:List[str]) -&gt; int:\n    nums = map(get_num, inp)\n    return sum(nums)\n\ncalibration_sum(example)\n\n142\n\n\n\nwith open(\"./input.txt\") as f:\n    inp = f.read().splitlines()\n\ncalibration_sum(inp)\n\n55488"
  },
  {
    "objectID": "day/01/index.html#part-2",
    "href": "day/01/index.html#part-2",
    "title": "Day 1: Trebuchet?!",
    "section": "Part 2",
    "text": "Part 2\nYour calculation isn‚Äôt quite right. It looks like some of the digits are actually spelled out with letters: one, two, three, four, five, six, seven, eight, and nine also count as valid ‚Äúdigits‚Äù.\nEquipped with this new information, you now need to find the real first and last digit on each line. For example:\neightwothree\nabcone2threexyz\nxtwone3four\n4nineeightseven2\nzoneight234\n7pqrstsixteen\nIn this example, the calibration values are 29, 83, 13, 24, 42, 14, and 76. Adding these together produces 281.\nWhat is the sum of all of the calibration values?\n\nMAPPINGS = {\n    \"one\":\"1\",\n    \"two\":\"2\",\n    \"three\":\"3\",\n    \"four\":\"4\",\n    \"five\":\"5\",\n    \"six\":\"6\",\n    \"seven\":\"7\",\n    \"eight\":\"8\",\n    \"nine\":\"9\"\n}\n\nexample2 = [\n    \"two1nine\",\n    \"eightwothree\",\n    \"abcone2threexyz\",\n    \"xtwone3four\",\n    \"4nineeightseven2\",\n    \"zoneight234\",\n    \"7pqrstsixteen\"\n    ]\n\n\ndef parse_num(s:str, direction:bool) -&gt; str:\n    curr = \"\"\n\n    # Forward direction = True\n    if direction:\n        for ch in s:\n            if ch.isdigit():\n                return ch\n            else:\n                curr += ch \n                for k,v in MAPPINGS.items():\n                    if k in curr:\n                        return v\n    # Reverse direction\n    else:\n        for ch in reversed(s):\n            if ch.isdigit():\n                return ch\n            else:\n                curr = ch + curr \n                for k,v in MAPPINGS.items():\n                    if k in curr:\n                        return v\n\nprint(parse_num(\"eightwothree\", True))\nprint(parse_num(\"eightwothree\", False))\n\n8\n3\n\n\n\ndef get_num2(s:str) -&gt; int:\n    first = parse_num(s, True)\n    last = parse_num(s, False)\n    return int(first + last)\n\ndef calibration_sum2(inp:List[str]) -&gt; int:\n    nums = map(get_num2, inp)\n    return sum(nums)\n\ncalibration_sum2(example2)\n\n281\n\n\n\ncalibration_sum2(inp)\n\n55614"
  },
  {
    "objectID": "day/01/index.html#til",
    "href": "day/01/index.html#til",
    "title": "Day 1: Trebuchet?!",
    "section": "TIL",
    "text": "TIL\n\n[*string] converts a string into a list of elements\n\ns = \"1abc2\"\n[*s]\n\n['1', 'a', 'b', 'c', '2']"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "üéÖüèº Advent of Code 2023",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nDay 1: Trebuchet?!\n\n\n\n\n\n\n\n\n\n\n\nDay 2: Cube Conundrum\n\n\n\n\n\n\n\n\n\n\n\nDay 3: Gear Ratios\n\n\n\n\n\n\n\n\n\n\n\nDay 4: Scratchcards\n\n\n\n\n\n\n\n\n\n\n\nDay 5: If You Give A Seed A Fertilizer\n\n\n\n\n\n\n\n\n\n\n\nDay 6: Wait For It\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "day/02/index.html",
    "href": "day/02/index.html",
    "title": "Day 2: Cube Conundrum",
    "section": "",
    "text": "As you walk, the Elf shows you a small bag and some cubes which are either red, green, or blue. Each time you play this game, he will hide a secret number of cubes of each color in the bag, and your goal is to figure out information about the number of cubes.\nTo get information, once a bag has been loaded with cubes, the Elf will reach into the bag, grab a handful of random cubes, show them to you, and then put them back in the bag. He‚Äôll do this a few times per game.\nYou play several games and record the information from each game (your puzzle input). Each game is listed with its ID number (like the 11 in Game 11: ‚Ä¶) followed by a semicolon-separated list of subsets of cubes that were revealed from the bag (like 3 red, 5 green, 4 blue).\nFor example, the record of a few games might look like this:\nGame 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\nIn game 1, three sets of cubes are revealed from the bag (and then put back again). The first set is 3 blue cubes and 4 red cubes; the second set is 1 red cube, 2 green cubes, and 6 blue cubes; the third set is only 2 green cubes.\nThe Elf would first like to know which games would have been possible if the bag contained only 12 red cubes, 13 green cubes, and 14 blue cubes?\nIn the example above, games 1, 2, and 5 would have been possible if the bag had been loaded with that configuration. However, game 3 would have been impossible because at one point the Elf showed you 20 red cubes at once; similarly, game 4 would also have been impossible because the Elf showed you 15 blue cubes at once. If you add up the IDs of the games that would have been possible, you get 8.\nDetermine which games would have been possible if the bag had been loaded with only 12 red cubes, 13 green cubes, and 14 blue cubes. What is the sum of the IDs of those games?"
  },
  {
    "objectID": "day/02/index.html#part-1",
    "href": "day/02/index.html#part-1",
    "title": "Day 2: Cube Conundrum",
    "section": "Part 1",
    "text": "Part 1\nAs you walk, the Elf shows you a small bag and some cubes which are either red, green, or blue. Each time you play this game, he will hide a secret number of cubes of each color in the bag, and your goal is to figure out information about the number of cubes.\nTo get information, once a bag has been loaded with cubes, the Elf will reach into the bag, grab a handful of random cubes, show them to you, and then put them back in the bag. He‚Äôll do this a few times per game.\nYou play several games and record the information from each game (your puzzle input). Each game is listed with its ID number (like the 11 in Game 11: ‚Ä¶) followed by a semicolon-separated list of subsets of cubes that were revealed from the bag (like 3 red, 5 green, 4 blue).\nFor example, the record of a few games might look like this:\nGame 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\nIn game 1, three sets of cubes are revealed from the bag (and then put back again). The first set is 3 blue cubes and 4 red cubes; the second set is 1 red cube, 2 green cubes, and 6 blue cubes; the third set is only 2 green cubes.\nThe Elf would first like to know which games would have been possible if the bag contained only 12 red cubes, 13 green cubes, and 14 blue cubes?\nIn the example above, games 1, 2, and 5 would have been possible if the bag had been loaded with that configuration. However, game 3 would have been impossible because at one point the Elf showed you 20 red cubes at once; similarly, game 4 would also have been impossible because the Elf showed you 15 blue cubes at once. If you add up the IDs of the games that would have been possible, you get 8.\nDetermine which games would have been possible if the bag had been loaded with only 12 red cubes, 13 green cubes, and 14 blue cubes. What is the sum of the IDs of those games?\n\nimport re\nimport polars as pl\nfrom typing import List\n\ndef colour_regex(colour:str, text:str) -&gt; int:\n    search = re.search(rf\"(\\d+) {colour}\", text)\n    if search is None:\n        return 0\n    return int(search.group(1))\n\n\ndef parse(inp: List[str]) -&gt; pl.DataFrame:\n    game_ids = []\n    blue = []\n    red = []\n    green = []\n\n    for s in inp:\n        game_id = int(s.split(\": \")[0].split(\" \")[1])\n        subsets = s.split(\": \")[1].split(\"; \")\n        for subset in subsets:\n            game_ids.append(game_id)\n            blue.append(colour_regex(\"blue\", subset))\n            red.append(colour_regex(\"red\", subset))\n            green.append(colour_regex(\"green\", subset))\n\n    return pl.DataFrame({\n        \"game_id\" : game_ids,\n        \"blue\" : blue,\n        \"red\": red,\n        \"green\": green\n    })\n\n\nexample = [\n    \"Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\",\n    \"Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\",\n    \"Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\",\n    \"Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\",\n    \"Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\"\n]\n\nparse(example)\n\n\nshape: (14, 4)\n\n\n\ngame_id\nblue\nred\ngreen\n\n\ni64\ni64\ni64\ni64\n\n\n\n\n1\n3\n4\n0\n\n\n1\n6\n1\n2\n\n\n1\n0\n0\n2\n\n\n2\n1\n0\n2\n\n\n2\n4\n1\n3\n\n\n2\n1\n0\n1\n\n\n3\n6\n20\n8\n\n\n3\n5\n4\n13\n\n\n3\n0\n1\n5\n\n\n4\n6\n3\n1\n\n\n4\n0\n6\n3\n\n\n4\n15\n14\n3\n\n\n5\n1\n6\n3\n\n\n5\n2\n1\n2\n\n\n\n\n\n\n\ndef part1(df:pl.DataFrame, red:int, green:int, blue:int) -&gt; int:\n    \"\"\"\n    Input:\n    - `df` : A DataFrame with every subset shown\n    - Known true values of red, green and blue cubes\n    \n    Output: the sum of unique game_ids after filtering out impossible subsets\n    \"\"\"\n\n    invalid = (df\n        .filter((pl.col(\"blue\") &gt; blue) | (pl.col(\"red\") &gt; red) | (pl.col(\"green\") &gt; green))\n        .select(pl.col(\"game_id\").unique())\n        )\n    \n    valid = (df\n        .select(pl.col(\"game_id\").unique())\n        .join(invalid, on=\"game_id\", how=\"anti\")\n    )\n    \n    return valid.select(pl.col(\"game_id\").sum()).item()\n\npart1(df = parse(example), red =12, green=13, blue=14)\n\n8\n\n\n\nwith open(\"./input.txt\") as f:\n    inp = f.read().splitlines()\n\npart1(df = parse(inp), red =12, green=13, blue=14)\n\n2913"
  },
  {
    "objectID": "day/02/index.html#part-2",
    "href": "day/02/index.html#part-2",
    "title": "Day 2: Cube Conundrum",
    "section": "Part 2",
    "text": "Part 2\nThe Elf says they‚Äôve stopped producing snow because they aren‚Äôt getting any water! He isn‚Äôt sure why the water stopped; however, he can show you how to get to the water source to check it out for yourself. It‚Äôs just up ahead!\nAs you continue your walk, the Elf poses a second question: in each game you played, what is the fewest number of cubes of each color that could have been in the bag to make the game possible?\nAgain consider the example games from earlier:\nGame 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\n\nIn game 1, the game could have been played with as few as 4 red, 2 green, and 6 blue cubes. If any color had even one fewer cube, the game would have been impossible.\nGame 2 could have been played with a minimum of 1 red, 3 green, and 4 blue cubes.\nGame 3 must have been played with at least 20 red, 13 green, and 6 blue cubes.\nGame 4 required at least 14 red, 3 green, and 15 blue cubes.\nGame 5 needed no fewer than 6 red, 3 green, and 2 blue cubes in the bag.\n\nThe power of a set of cubes is equal to the numbers of red, green, and blue cubes multiplied together. The power of the minimum set of cubes in game 1 is 48. In games 2-5 it was 12, 1560, 630, and 36, respectively. Adding up these five powers produces the sum 2286.\nFor each game, find the minimum set of cubes that must have been present. What is the sum of the power of these sets?\n\ndef part2(df:pl.DataFrame, red:int, green:int, blue:int) -&gt; int:\n    max_n_per_colour = df.group_by(\"game_id\").agg(\n        pl.col(\"blue\").max(),\n        pl.col(\"red\").max(),\n        pl.col(\"green\").max()\n    )\n\n    return (max_n_per_colour\n        .select(pl.col(\"blue\") * pl.col(\"red\") * pl.col(\"green\"))\n        .sum()\n        )\n\nprint(part2(df = parse(example), red =12, green=13, blue=14))\n\nprint(part2(df = parse(inp), red =12, green=13, blue=14))\n\nshape: (1, 1)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ blue ‚îÇ\n‚îÇ ---  ‚îÇ\n‚îÇ i64  ‚îÇ\n‚ïû‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï°\n‚îÇ 2286 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\nshape: (1, 1)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ blue  ‚îÇ\n‚îÇ ---   ‚îÇ\n‚îÇ i64   ‚îÇ\n‚ïû‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï°\n‚îÇ 55593 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
  },
  {
    "objectID": "day/02/index.html#til",
    "href": "day/02/index.html#til",
    "title": "Day 2: Cube Conundrum",
    "section": "TIL",
    "text": "TIL\n\nYou can combine f and r strings\n\n# regex string example\nr1 = re.search(r\"(\\d+) blue\", \"3 blue, 4 red\").group(1)\nprint(f\"{r1 =}\")\n\n# combining regex and f string for string interpolation\ncolour = \"blue\"\nr2 = re.search(rf\"(\\d+) {colour}\", \"3 blue, 4 red\").group(1)\nprint(f\"{r2 =}\")\n\nr1 ='3'\nr2 ='3'\n\n\n\n\nanti joins in polars\ndf.join(invalid, on=\"game_id\", how=\"anti\")\n\n\n.item() to retrieve value of cell from polars Dataframe\nvalid.select(pl.col(\"game_id\").sum()).item()"
  },
  {
    "objectID": "day/03/index.html",
    "href": "day/03/index.html",
    "title": "Day 3: Gear Ratios",
    "section": "",
    "text": "You and the Elf eventually reach a gondola lift station; he says the gondola lift will take you up to the water source, but this is as far as he can bring you. You go inside.\nIt doesn‚Äôt take long to find the gondolas, but there seems to be a problem: they‚Äôre not moving.\n‚ÄúAaah!‚Äù\nYou turn around to see a slightly-greasy Elf with a wrench and a look of surprise. ‚ÄúSorry, I wasn‚Äôt expecting anyone! The gondola lift isn‚Äôt working right now; it‚Äôll still be a while before I can fix it.‚Äù You offer to help.\nThe engineer explains that an engine part seems to be missing from the engine, but nobody can figure out which one. If you can add up all the part numbers in the engine schematic, it should be easy to work out which part is missing.\nThe engine schematic (your puzzle input) consists of a visual representation of the engine. There are lots of numbers and symbols you don‚Äôt really understand, but apparently any number adjacent to a symbol, even diagonally, is a ‚Äúpart number‚Äù and should be included in your sum. (Periods (.) do not count as a symbol.)\nHere is an example engine schematic:\n467..114..\n...*......\n..35..633.\n......#...\n617*......\n.....+.58.\n..592.....\n......755.\n...$.*....\n.664.598..\nIn this schematic, two numbers are not part numbers because they are not adjacent to a symbol: 114 (top right) and 58 (middle right). Every other number is adjacent to a symbol and so is a part number; their sum is 4361.\nOf course, the actual engine schematic is much larger. What is the sum of all of the part numbers in the engine schematic?\n\nimport re\nfrom typing import List, Tuple, Set\nfrom collections import namedtuple\n\nexample = \"\"\"467..114..\n...*......\n..35..633.\n......#...\n617*......\n.....+.58.\n..592.....\n......755.\n...$.*....\n.664.598..\"\"\"\n\ndef part_num(before:str, current:str, after:str, SYMBOLS:Set[str]) -&gt; int:\n    valid_nums = []\n    symbol_pos = {i for i,v in enumerate(before) if v in SYMBOLS}\n    symbol_pos |= {i for i,v in enumerate(current) if v in SYMBOLS}\n    symbol_pos |= {i for i,v in enumerate(after) if v in SYMBOLS}\n    \n    for r in re.finditer(\"[\\d]+\", current):\n        num_pos = set(range(r.span()[0] - 1, r.span()[1] + 1))\n        if symbol_pos & num_pos:\n            valid_nums.append(int(r.group(0)))\n    \n    return sum(valid_nums)\n\ndef part1(inp:str) -&gt; int:\n    SYMBOLS = set(inp) - set('0123456789') - set('\\n.')\n    lines = inp.splitlines()\n    lines.insert(0, \".\" * len(lines[0]))\n    lines.append(\".\" * len(lines[0])) \n    before = lines\n    current = lines[1:-1]\n    after = lines[2:]\n\n    valid_nums = [part_num(*step, SYMBOLS) for step in zip(before, current, after)]\n\n    return sum(valid_nums)\n\npart1(example)\n\n4361\n\n\n\nwith open(\"./input.txt\") as f:\n    inp = f.read()\npart1(inp)\n\n536202"
  },
  {
    "objectID": "day/03/index.html#part-1",
    "href": "day/03/index.html#part-1",
    "title": "Day 3: Gear Ratios",
    "section": "Part 1",
    "text": "Part 1\nYou and the Elf eventually reach a gondola lift station; he says the gondola lift will take you up to the water source, but this is as far as he can bring you. You go inside.\nIt doesn‚Äôt take long to find the gondolas, but there seems to be a problem: they‚Äôre not moving.\n‚ÄúAaah!‚Äù\nYou turn around to see a slightly-greasy Elf with a wrench and a look of surprise. ‚ÄúSorry, I wasn‚Äôt expecting anyone! The gondola lift isn‚Äôt working right now; it‚Äôll still be a while before I can fix it.‚Äù You offer to help.\nThe engineer explains that an engine part seems to be missing from the engine, but nobody can figure out which one. If you can add up all the part numbers in the engine schematic, it should be easy to work out which part is missing.\nThe engine schematic (your puzzle input) consists of a visual representation of the engine. There are lots of numbers and symbols you don‚Äôt really understand, but apparently any number adjacent to a symbol, even diagonally, is a ‚Äúpart number‚Äù and should be included in your sum. (Periods (.) do not count as a symbol.)\nHere is an example engine schematic:\n467..114..\n...*......\n..35..633.\n......#...\n617*......\n.....+.58.\n..592.....\n......755.\n...$.*....\n.664.598..\nIn this schematic, two numbers are not part numbers because they are not adjacent to a symbol: 114 (top right) and 58 (middle right). Every other number is adjacent to a symbol and so is a part number; their sum is 4361.\nOf course, the actual engine schematic is much larger. What is the sum of all of the part numbers in the engine schematic?\n\nimport re\nfrom typing import List, Tuple, Set\nfrom collections import namedtuple\n\nexample = \"\"\"467..114..\n...*......\n..35..633.\n......#...\n617*......\n.....+.58.\n..592.....\n......755.\n...$.*....\n.664.598..\"\"\"\n\ndef part_num(before:str, current:str, after:str, SYMBOLS:Set[str]) -&gt; int:\n    valid_nums = []\n    symbol_pos = {i for i,v in enumerate(before) if v in SYMBOLS}\n    symbol_pos |= {i for i,v in enumerate(current) if v in SYMBOLS}\n    symbol_pos |= {i for i,v in enumerate(after) if v in SYMBOLS}\n    \n    for r in re.finditer(\"[\\d]+\", current):\n        num_pos = set(range(r.span()[0] - 1, r.span()[1] + 1))\n        if symbol_pos & num_pos:\n            valid_nums.append(int(r.group(0)))\n    \n    return sum(valid_nums)\n\ndef part1(inp:str) -&gt; int:\n    SYMBOLS = set(inp) - set('0123456789') - set('\\n.')\n    lines = inp.splitlines()\n    lines.insert(0, \".\" * len(lines[0]))\n    lines.append(\".\" * len(lines[0])) \n    before = lines\n    current = lines[1:-1]\n    after = lines[2:]\n\n    valid_nums = [part_num(*step, SYMBOLS) for step in zip(before, current, after)]\n\n    return sum(valid_nums)\n\npart1(example)\n\n4361\n\n\n\nwith open(\"./input.txt\") as f:\n    inp = f.read()\npart1(inp)\n\n536202"
  },
  {
    "objectID": "day/03/index.html#part-2",
    "href": "day/03/index.html#part-2",
    "title": "Day 3: Gear Ratios",
    "section": "Part 2",
    "text": "Part 2\nThe engineer finds the missing part and installs it in the engine! As the engine springs to life, you jump in the closest gondola, finally ready to ascend to the water source.\nYou don‚Äôt seem to be going very fast, though. Maybe something is still wrong? Fortunately, the gondola has a phone labeled ‚Äúhelp‚Äù, so you pick it up and the engineer answers.\nBefore you can explain the situation, she suggests that you look out the window. There stands the engineer, holding a phone in one hand and waving with the other. You‚Äôre going so slowly that you haven‚Äôt even left the station. You exit the gondola.\nThe missing part wasn‚Äôt the only issue - one of the gears in the engine is wrong. A gear is any * symbol that is adjacent to exactly two part numbers. Its gear ratio is the result of multiplying those two numbers together.\nThis time, you need to find the gear ratio of every gear and add them all up so that the engineer can figure out which gear needs to be replaced.\nConsider the same engine schematic again:\n467..114..\n...*......\n..35..633.\n......#...\n617*......\n.....+.58.\n..592.....\n......755.\n...$.*....\n.664.598..\nIn this schematic, there are two gears. The first is in the top left; it has part numbers 467 and 35, so its gear ratio is 16345. The second gear is in the lower right; its gear ratio is 451490. (The * adjacent to 617 is not a gear because it is only adjacent to one part number.) Adding up all of the gear ratios produces 467835.\nWhat is the sum of all of the gear ratios in your engine schematic?\n\ndef gear_ratio(before:str, current:str, after:str, SYMBOLS):\n    stars = {i for i, v in enumerate(current) if v == \"*\"}\n    numbers_pos = [(r.span()[0], r.span()[1], int(r.group(0))) for r in re.finditer(\"[\\d]+\", before)]\n    numbers_pos.extend([(r.span()[0], r.span()[1], int(r.group(0))) for r in re.finditer(\"[\\d]+\", current)])\n    numbers_pos.extend([(r.span()[0], r.span()[1], int(r.group(0))) for r in re.finditer(\"[\\d]+\", after)])\n\n    gears = []\n    for s in stars:\n        numbers = []\n        for npos in numbers_pos:\n            if npos[0] - 1 &lt;= s &lt;= npos[1]:\n                numbers.append(npos[2])\n            if len(numbers) == 2:\n                gears.append(numbers[0] * numbers[1])\n\n    return gears\n\n\ndef part2(inp:str) -&gt; int:\n    SYMBOLS = set(inp) - set('0123456789') - set('\\n.')\n    lines = inp.splitlines()\n    lines.insert(0, \".\" * len(lines[0]))\n    lines.append(\".\" * len(lines[0])) \n    before = lines\n    current = lines[1:-1]\n    after = lines[2:]\n\n    valid_nums = [gear_ratio(*step, SYMBOLS) for step in zip(before, current, after)]\n    valid_nums = set(sum(valid_nums, []))\n    return sum(valid_nums)\n\npart2(example)\n\n467835\n\n\n\npart2(inp)\n\n78272573"
  },
  {
    "objectID": "day/03/index.html#til",
    "href": "day/03/index.html#til",
    "title": "Day 3: Gear Ratios",
    "section": "TIL",
    "text": "TIL\n\nUsing an expanded list and zip to extract moving window of current line, line before and line after\n\ndata = example\nSYMBOLS = set(data) - set('0123456789') - set('\\n.')\nSYMBOLS\n\nlines = example.splitlines()\nlines.insert(0, \".\" * len(lines[0]))\nlines.append(\".\" * len(lines[0]))\n\nbefore = lines\ncurrent = lines[1:-1]\nafter = lines[2:]\n\nfor step in zip(before, current, after):\n    print(*step)\n\n.......... 467..114.. ...*......\n467..114.. ...*...... ..35..633.\n...*...... ..35..633. ......#...\n..35..633. ......#... 617*......\n......#... 617*...... .....+.58.\n617*...... .....+.58. ..592.....\n.....+.58. ..592..... ......755.\n..592..... ......755. ...$.*....\n......755. ...$.*.... .664.598..\n...$.*.... .664.598.. ..........\n\n\n\n\n|= performs in-place OR operation for LHS and RHS\nSee https://stackoverflow.com/questions/3929278/what-does-ior-do-in-python\n\n\nre.finditer() finds both matching pattern and span\n\nfor line in current:\n    for r in re.finditer(\"\\d+\", line):\n        print(r)\n\n&lt;re.Match object; span=(0, 3), match='467'&gt;\n&lt;re.Match object; span=(5, 8), match='114'&gt;\n&lt;re.Match object; span=(2, 4), match='35'&gt;\n&lt;re.Match object; span=(6, 9), match='633'&gt;\n&lt;re.Match object; span=(0, 3), match='617'&gt;\n&lt;re.Match object; span=(7, 9), match='58'&gt;\n&lt;re.Match object; span=(2, 5), match='592'&gt;\n&lt;re.Match object; span=(6, 9), match='755'&gt;\n&lt;re.Match object; span=(1, 4), match='664'&gt;\n&lt;re.Match object; span=(5, 8), match='598'&gt;\n\n\n\n\nsum(list_of_lists, []) can flatten list of lists into 1 list\n\nlist_of_lists = [[], [16345, 16345], [], [], [], [], [], [], [451490], []]\n\nsum(list_of_lists, [])\n\n[16345, 16345, 451490]"
  },
  {
    "objectID": "day/03/index.html#reference",
    "href": "day/03/index.html#reference",
    "title": "Day 3: Gear Ratios",
    "section": "Reference",
    "text": "Reference\n\nSolution adapted from topaz\nBeautiful visualisation with Altair by Jung Hoon Son"
  },
  {
    "objectID": "day/04/index.html#part-1",
    "href": "day/04/index.html#part-1",
    "title": "Day 4: Scratchcards",
    "section": "Part 1",
    "text": "Part 1\nFor example:\nCard 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53\nCard 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19\nCard 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1\nCard 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83\nCard 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36\nCard 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11\nIn the above example, card 1 has five winning numbers (41, 48, 83, 86, and 17) and eight numbers you have (83, 86, 6, 31, 17, 9, 48, and 53). Of the numbers you have, four of them (48, 83, 17, and 86) are winning numbers! That means card 1 is worth 8 points (1 for the first match, then doubled three times for each of the three matches after the first).\nCard 2 has two winning numbers (32 and 61), so it is worth 2 points. Card 3 has two winning numbers (1 and 21), so it is worth 2 points. Card 4 has one winning number (84), so it is worth 1 point. Card 5 has no winning numbers, so it is worth no points. Card 6 has no winning numbers, so it is worth no points. So, in this example, the Elf‚Äôs pile of scratchcards is worth 13 points.\nTake a seat in the large pile of colorful cards. How many points are they worth in total?\n\nimport re\nfrom typing import List\n\nexample = \"\"\"Card 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53\nCard 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19\nCard 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1\nCard 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83\nCard 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36\nCard 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11\"\"\"\n\ndef count_wins(inp:str) -&gt; List[int]:\n    pattern = r\"Card.+: (.+) \\| (.+)\"\n    wins = []\n    for line in inp.splitlines():\n        r = re.search(pattern, line)\n        winners = set(int(n) for n in r.group(1).split())\n        card = set(int(n) for n in r.group(2).split())\n        wins.append(len(winners.intersection(card)))\n    return wins\n\ndef part1(inp:str) -&gt; int:\n    wins = count_wins(inp)\n    score = [2 ** (w-1) for w in wins if w &gt; 0]\n    return sum(score)\n\npart1(example)\n\n13\n\n\n\nwith open(\"./input.txt\") as f:\n    inp = f.read()\npart1(inp)\n\n25174"
  },
  {
    "objectID": "day/04/index.html#part-2",
    "href": "day/04/index.html#part-2",
    "title": "Day 4: Scratchcards",
    "section": "Part 2",
    "text": "Part 2\nThis time, the above example goes differently:\nCard 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53\nCard 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19\nCard 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1\nCard 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83\nCard 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36\nCard 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11\nCard 1 has four matching numbers, so you win one copy each of the next four cards: cards 2, 3, 4, and 5. Your original card 2 has two matching numbers, so you win one copy each of cards 3 and 4. Your copy of card 2 also wins one copy each of cards 3 and 4. Your four instances of card 3 (one original and three copies) have two matching numbers, so you win four copies each of cards 4 and 5. Your eight instances of card 4 (one original and seven copies) have one matching number, so you win eight copies of card 5. Your fourteen instances of card 5 (one original and thirteen copies) have no matching numbers and win no more cards. Your one instance of card 6 (one original) has no matching numbers and wins no more cards. Once all of the originals and copies have been processed, you end up with 1 instance of card 1, 2 instances of card 2, 4 instances of card 3, 8 instances of card 4, 14 instances of card 5, and 1 instance of card 6. In total, this example pile of scratchcards causes you to ultimately have 30 scratchcards!\nProcess all of the original and copied scratchcards until no more scratchcards are won. Including the original set of scratchcards, how many total scratchcards do you end up with?\n\ndef part2(inp:str) -&gt; int:\n    wins = count_wins(inp)\n    score = [2 ** (w-1) if w&gt;0 else 0 for w in wins]\n\n    # DP comes in useful\n    # We start with 1 copy of each card\n    copies = [1] * len(wins)\n    for i, w in enumerate((wins)):\n        current = copies[i]\n        for j in range(1,w+1):\n            copies[i+j] += current\n\n    return sum(copies)\n\n\npart2(example)\n\n30\n\n\n\npart2(inp)\n\n6420979"
  },
  {
    "objectID": "day/04/index.html#til",
    "href": "day/04/index.html#til",
    "title": "Day 4: Scratchcards",
    "section": "TIL",
    "text": "TIL\n\nDefault shortcut to insert code cell when using vscode-quarto is shift+cmd+i\n\n\nThis pattern of Combinatorics/Recursive type problem can be solved by Dynamic Programming\nTo design a DP solution, it helps to write everything out by hand so we can get a sense of what intermediate values need to be tracked (memoized).\nMy notes that helped me figure out the solution\nWins 4 2 2 1 0 0\nv&gt;0  1 1 1 1 1 1\n     1 2 2 2 2 1\n     1 2 4 4 2 1\n     1 2 4 8 6 1 \n     1 2 4 8 14 1\n     1 2 4 8 14 1\n              \nCard 1 2 3 4 5 6\n       2 3 4 5\n         3 4\n         3 4\n           4 5\n           4 5\n           4 5\n           4 5\n             5\n             5\n             5\n             5\n             5\n             5\n             5\n             5"
  },
  {
    "objectID": "day/06/index.html",
    "href": "day/06/index.html",
    "title": "Day 6: Wait For It",
    "section": "",
    "text": "For example:\nTime:      7  15   30\nDistance:  9  40  200\nThis document describes three races:\nThe first race lasts 7 milliseconds. The record distance in this race is 9 millimeters. The second race lasts 15 milliseconds. The record distance in this race is 40 millimeters. The third race lasts 30 milliseconds. The record distance in this race is 200 millimeters. Your toy boat has a starting speed of zero millimeters per millisecond. For each whole millisecond you spend at the beginning of the race holding down the button, the boat‚Äôs speed increases by one millimeter per millisecond.\nSo, because the first race lasts 7 milliseconds, you only have a few options:\nDon‚Äôt hold the button at all (that is, hold it for 0 milliseconds) at the start of the race. The boat won‚Äôt move; it will have traveled 0 millimeters by the end of the race. Hold the button for 1 millisecond at the start of the race. Then, the boat will travel at a speed of 1 millimeter per millisecond for 6 milliseconds, reaching a total distance traveled of 6 millimeters. Hold the button for 2 milliseconds, giving the boat a speed of 2 millimeters per millisecond. It will then get 5 milliseconds to move, reaching a total distance of 10 millimeters. Hold the button for 3 milliseconds. After its remaining 4 milliseconds of travel time, the boat will have gone 12 millimeters. Hold the button for 4 milliseconds. After its remaining 3 milliseconds of travel time, the boat will have gone 12 millimeters. Hold the button for 5 milliseconds, causing the boat to travel a total of 10 millimeters. Hold the button for 6 milliseconds, causing the boat to travel a total of 6 millimeters. Hold the button for 7 milliseconds. That‚Äôs the entire duration of the race. You never let go of the button. The boat can‚Äôt move until you let go of the button. Please make sure you let go of the button so the boat gets to move. 0 millimeters. Since the current record for this race is 9 millimeters, there are actually 4 different ways you could win: you could hold the button for 2, 3, 4, or 5 milliseconds at the start of the race.\nIn the second race, you could hold the button for at least 4 milliseconds and at most 11 milliseconds and beat the record, a total of 8 different ways to win.\nIn the third race, you could hold the button for at least 11 milliseconds and no more than 19 milliseconds and still beat the record, a total of 9 ways you could win.\nTo see how much margin of error you have, determine the number of ways you can beat the record in each race; in this example, if you multiply these values together, you get 288 (4 * 8 * 9).\nDetermine the number of ways you could beat the record in each race. What do you get if you multiply these numbers together?\n\nexample = \"\"\"Time:      7  15   30\nDistance:  9  40  200\"\"\"\nexample\n\n'Time:      7  15   30\\nDistance:  9  40  200'\n\n\n\nimport re\nimport math\nfrom typing import List, Tuple\n\ndef parse_input(inp:str)-&gt;Tuple[List[int],List[int]]:\n    time_raw = inp.splitlines()[0]\n    time = re.findall(r\"\\d+\", time_raw) \n    time = [int(t) for t in time]\n    \n    distance_raw = inp.splitlines()[1]\n    distance = re.findall(r\"\\d+\", distance_raw)\n    distance = [int(d) for d in distance] \n    \n    return (time, distance)\n\ndef ways_to_win(time:int, dist:int) -&gt; int:\n    count = 0\n    for t in range(1,time):\n        move = t * (time-t)\n        if move &gt; dist:\n            count += 1\n    return count\n\ndef part1(inp:str):\n    time, distance = parse_input(inp)\n    wins = [ways_to_win(t,d) for t, d in zip(time,distance)]\n    return math.prod(wins)\n\npart1(example)\n\n288\n\n\n\nwith open(\"./input.txt\") as f:\n    inp = f.read()\npart1(inp)\n\n138915"
  },
  {
    "objectID": "day/06/index.html#part-1",
    "href": "day/06/index.html#part-1",
    "title": "Day 6: Wait For It",
    "section": "Part 1",
    "text": "Part 1\nFor example:\nTime:      7  15   30\nDistance:  9  40  200\nThis document describes three races:\nThe first race lasts 7 milliseconds. The record distance in this race is 9 millimeters. The second race lasts 15 milliseconds. The record distance in this race is 40 millimeters. The third race lasts 30 milliseconds. The record distance in this race is 200 millimeters. Your toy boat has a starting speed of zero millimeters per millisecond. For each whole millisecond you spend at the beginning of the race holding down the button, the boat‚Äôs speed increases by one millimeter per millisecond.\nSo, because the first race lasts 7 milliseconds, you only have a few options:\nDon‚Äôt hold the button at all (that is, hold it for 0 milliseconds) at the start of the race. The boat won‚Äôt move; it will have traveled 0 millimeters by the end of the race. Hold the button for 1 millisecond at the start of the race. Then, the boat will travel at a speed of 1 millimeter per millisecond for 6 milliseconds, reaching a total distance traveled of 6 millimeters. Hold the button for 2 milliseconds, giving the boat a speed of 2 millimeters per millisecond. It will then get 5 milliseconds to move, reaching a total distance of 10 millimeters. Hold the button for 3 milliseconds. After its remaining 4 milliseconds of travel time, the boat will have gone 12 millimeters. Hold the button for 4 milliseconds. After its remaining 3 milliseconds of travel time, the boat will have gone 12 millimeters. Hold the button for 5 milliseconds, causing the boat to travel a total of 10 millimeters. Hold the button for 6 milliseconds, causing the boat to travel a total of 6 millimeters. Hold the button for 7 milliseconds. That‚Äôs the entire duration of the race. You never let go of the button. The boat can‚Äôt move until you let go of the button. Please make sure you let go of the button so the boat gets to move. 0 millimeters. Since the current record for this race is 9 millimeters, there are actually 4 different ways you could win: you could hold the button for 2, 3, 4, or 5 milliseconds at the start of the race.\nIn the second race, you could hold the button for at least 4 milliseconds and at most 11 milliseconds and beat the record, a total of 8 different ways to win.\nIn the third race, you could hold the button for at least 11 milliseconds and no more than 19 milliseconds and still beat the record, a total of 9 ways you could win.\nTo see how much margin of error you have, determine the number of ways you can beat the record in each race; in this example, if you multiply these values together, you get 288 (4 * 8 * 9).\nDetermine the number of ways you could beat the record in each race. What do you get if you multiply these numbers together?\n\nexample = \"\"\"Time:      7  15   30\nDistance:  9  40  200\"\"\"\nexample\n\n'Time:      7  15   30\\nDistance:  9  40  200'\n\n\n\nimport re\nimport math\nfrom typing import List, Tuple\n\ndef parse_input(inp:str)-&gt;Tuple[List[int],List[int]]:\n    time_raw = inp.splitlines()[0]\n    time = re.findall(r\"\\d+\", time_raw) \n    time = [int(t) for t in time]\n    \n    distance_raw = inp.splitlines()[1]\n    distance = re.findall(r\"\\d+\", distance_raw)\n    distance = [int(d) for d in distance] \n    \n    return (time, distance)\n\ndef ways_to_win(time:int, dist:int) -&gt; int:\n    count = 0\n    for t in range(1,time):\n        move = t * (time-t)\n        if move &gt; dist:\n            count += 1\n    return count\n\ndef part1(inp:str):\n    time, distance = parse_input(inp)\n    wins = [ways_to_win(t,d) for t, d in zip(time,distance)]\n    return math.prod(wins)\n\npart1(example)\n\n288\n\n\n\nwith open(\"./input.txt\") as f:\n    inp = f.read()\npart1(inp)\n\n138915"
  },
  {
    "objectID": "day/06/index.html#part-2",
    "href": "day/06/index.html#part-2",
    "title": "Day 6: Wait For It",
    "section": "Part 2",
    "text": "Part 2\nSo, the example from before:\nTime:      7  15   30\nDistance:  9  40  200\n‚Ä¶now instead means this:\nTime:      71530\nDistance:  940200\nNow, you have to figure out how many ways there are to win this single race. In this example, the race lasts for 71530 milliseconds and the record distance you need to beat is 940200 millimeters. You could hold the button anywhere from 14 to 71516 milliseconds and beat the record, a total of 71503 ways!\nHow many ways can you beat the record in this one much longer race?\n\ndef parse_input2(inp:str) -&gt; Tuple[int,int]:\n    time_raw = inp.splitlines()[0]\n    time = \"\".join(re.findall(r\"\\d+\", time_raw)) \n    time = int(time)\n    \n    distance_raw = inp.splitlines()[1]\n    distance = \"\".join(re.findall(r\"\\d+\", distance_raw))\n    distance = int(distance)\n    \n    return (time, distance)\n\ndef part2(inp:str):\n    time, distance = parse_input2(inp)\n    return ways_to_win(time,distance)\n\npart2(example)\n\n71503\n\n\n\npart2(inp)\n\n27340847"
  },
  {
    "objectID": "day/06/index.html#til",
    "href": "day/06/index.html#til",
    "title": "Day 6: Wait For It",
    "section": "TIL",
    "text": "TIL\n\nGet product of a List\n\nUsing math.prod\n\n\nimport math\nlst = [3,53,64,23]\nmath.prod(lst)\n\n234048\n\n\n\nUsing functools.reduce\n\n\nimport functools\nlst = [3,53,64,23]\nfunctools.reduce((lambda x, y : x * y), lst)\n\n234048"
  },
  {
    "objectID": "day/05/index.html#part-1",
    "href": "day/05/index.html#part-1",
    "title": "Day 5: If You Give A Seed A Fertilizer",
    "section": "Part 1",
    "text": "Part 1\nFor example:\nseeds: 79 14 55 13\n\nseed-to-soil map:\n50 98 2\n52 50 48\n\nsoil-to-fertilizer map:\n0 15 37\n37 52 2\n39 0 15\n\nfertilizer-to-water map:\n49 53 8\n0 11 42\n42 0 7\n57 7 4\n\nwater-to-light map:\n88 18 7\n18 25 70\n\nlight-to-temperature map:\n45 77 23\n81 45 19\n68 64 13\n\ntemperature-to-humidity map:\n0 69 1\n1 0 69\n\nhumidity-to-location map:\n60 56 37\n56 93 4\nThe almanac starts by listing which seeds need to be planted: seeds 79, 14, 55, and 13.\nThe rest of the almanac contains a list of maps which describe how to convert numbers from a source category into numbers in a destination category. That is, the section that starts with seed-to-soil map: describes how to convert a seed number (the source) to a soil number (the destination). This lets the gardener and his team know which soil to use with which seeds, which water to use with which fertilizer, and so on.\nRather than list every source number and its corresponding destination number one by one, the maps describe entire ranges of numbers that can be converted. Each line within a map contains three numbers: the destination range start, the source range start, and the range length.\nConsider again the example seed-to-soil map:\n50 98 2\n52 50 48\nThe first line has a destination range start of 50, a source range start of 98, and a range length of 2. This line means that the source range starts at 98 and contains two values: 98 and 99. The destination range is the same length, but it starts at 50, so its two values are 50 and 51. With this information, you know that seed number 98 corresponds to soil number 50 and that seed number 99 corresponds to soil number 51.\nThe second line means that the source range starts at 50 and contains 48 values: 50, 51, ‚Ä¶, 96, 97. This corresponds to a destination range starting at 52 and also containing 48 values: 52, 53, ‚Ä¶, 98, 99. So, seed number 53 corresponds to soil number 55.\nAny source numbers that aren‚Äôt mapped correspond to the same destination number. So, seed number 10 corresponds to soil number 10.\nSo, the entire list of seed numbers and their corresponding soil numbers looks like this:\nseed  soil\n0     0\n1     1\n...   ...\n48    48\n49    49\n50    52\n51    53\n...   ...\n96    98\n97    99\n98    50\n99    51\nWith this map, you can look up the soil number required for each initial seed number:\nSeed number 79 corresponds to soil number 81. Seed number 14 corresponds to soil number 14. Seed number 55 corresponds to soil number 57. Seed number 13 corresponds to soil number 13. The gardener and his team want to get started as soon as possible, so they‚Äôd like to know the closest location that needs a seed. Using these maps, find the lowest location number that corresponds to any of the initial seeds. To do this, you‚Äôll need to convert each seed number through other categories until you can find its corresponding location number. In this example, the corresponding types are:\nSeed 79, soil 81, fertilizer 81, water 81, light 74, temperature 78, humidity 78, location 82.\nSeed 14, soil 14, fertilizer 53, water 49, light 42, temperature 42, humidity 43, location 43.\nSeed 55, soil 57, fertilizer 57, water 53, light 46, temperature 82, humidity 82, location 86.\nSeed 13, soil 13, fertilizer 52, water 41, light 34, temperature 34, humidity 35, location 35.\nSo, the lowest location number in this example is 35.\nWhat is the lowest location number that corresponds to any of the initial seed numbers?\n\nexample = \"\"\"seeds: 79 14 55 13\n\nseed-to-soil map:\n50 98 2\n52 50 48\n\nsoil-to-fertilizer map:\n0 15 37\n37 52 2\n39 0 15\n\nfertilizer-to-water map:\n49 53 8\n0 11 42\n42 0 7\n57 7 4\n\nwater-to-light map:\n88 18 7\n18 25 70\n\nlight-to-temperature map:\n45 77 23\n81 45 19\n68 64 13\n\ntemperature-to-humidity map:\n0 69 1\n1 0 69\n\nhumidity-to-location map:\n60 56 37\n56 93 4\"\"\"\n\n\nimport re\nfrom typing import List, Dict\nfrom collections import namedtuple\n\nMapping = namedtuple(\"Mapping\", \"dest source length\")\n\ndef parse_seeds(inp:str) -&gt; List[int]:\n    pattern = r\"seeds: (.+)\\n\"\n    r = re.search(pattern, inp)\n    return [int(num) for num in r.group(1).split()]\n\ndef parse_mapping(inp:str, pattern:str) -&gt; List[Mapping]:\n    r = re.search(pattern,inp)\n    mappings = []\n    for m in r.group(1).splitlines():\n        nums = [int(n) for n in m.split()]\n        if len(nums) == 3:\n            mappings.append(Mapping(nums[0],nums[1], nums[2]))\n    return mappings\n\ndef convert(num:int, mappings:List[Mapping]) -&gt; int:\n    for m in mappings:\n        if num in range(m.source, m.source+m.length):\n            return (m.dest + num - m.source)\n    return num\n\ndef part1(inp:str) -&gt; int:\n    seeds = parse_seeds(inp)\n    seed_to_soil = parse_mapping(inp, pattern=r\"seed-to-soil map:\\n([\\S\\s]*?)soil\")\n    soil_to_fertilizer = parse_mapping(inp, pattern=r\"soil-to-fertilizer map:\\n([\\S\\s]*?)fertilizer\")\n    fertilizer_to_water = parse_mapping(inp, pattern=r\"fertilizer-to-water map:\\n([\\S\\s]*?)water\")\n    water_to_light = parse_mapping(inp, pattern=r\"water-to-light map:\\n([\\S\\s]*?)light\")\n    light_to_temp = parse_mapping(inp, pattern=r\"light-to-temperature map:\\n([\\S\\s]*?)temperature\")\n    temp_to_humidity = parse_mapping(inp, pattern=r\"temperature-to-humidity map:\\n([\\S\\s]*?)humidity\")\n    humidity_to_location = parse_mapping(inp, pattern=r\"humidity-to-location map:\\n([\\S\\s]*?)\")\n\n    soil = [convert(x, seed_to_soil) for x in seeds]\n    fertilizer = [convert(x, soil_to_fertilizer) for x in soil]\n    water = [convert(x, fertilizer_to_water) for x in fertilizer]\n    light = [convert(x, water_to_light) for x in water]\n    temp = [convert(x, light_to_temp) for x in light]\n    humidity = [convert(x, temp_to_humidity) for x in temp]\n    location = [convert(x, humidity_to_location) for x in humidity]\n\n    return min(location)\n\npart1(example)\n\n35\n\n\n\nwith open(\"./input.txt\") as f:\n    inp = f.read()\npart1(inp)\n\n278755257"
  },
  {
    "objectID": "day/05/index.html#part-2",
    "href": "day/05/index.html#part-2",
    "title": "Day 5: If You Give A Seed A Fertilizer",
    "section": "Part 2",
    "text": "Part 2\nEveryone will starve if you only plant such a small number of seeds. Re-reading the almanac, it looks like the seeds: line actually describes ranges of seed numbers.\nThe values on the initial seeds: line come in pairs. Within each pair, the first value is the start of the range and the second value is the length of the range. So, in the first line of the example above:\nseeds: 79 14 55 13 This line describes two ranges of seed numbers to be planted in the garden. The first range starts with seed number 79 and contains 14 values: 79, 80, ‚Ä¶, 91, 92. The second range starts with seed number 55 and contains 13 values: 55, 56, ‚Ä¶, 66, 67.\nNow, rather than considering four seed numbers, you need to consider a total of 27 seed numbers.\nIn the above example, the lowest location number can be obtained from seed number 82, which corresponds to soil 84, fertilizer 84, water 84, light 77, temperature 45, humidity 46, and location 46. So, the lowest location number is 46.\nConsider all of the initial seed numbers listed in the ranges on the first line of the almanac. What is the lowest location number that corresponds to any of the initial seed numbers?\n\ndef parse_seeds2(inp:str) -&gt; List[range]:\n    pattern = r\"seeds: (.+)\\n\"\n    r = re.search(pattern, inp)\n    seeds = [int(num) for num in r.group(1).split()]\n    ret = []\n    for i in range(0,len(seeds),2):\n        # Create a tuple to represent range with start and end inclusive\n        ret.append((seeds[i],seeds[i]+seeds[i+1]-1))\n    return ret\n\n\n# def convert2(seeds:List[range], mappings:List[Mapping]) -&gt; List[range]:\n#     converted_seeds = []\n#     while len(seeds) &gt; 0:\n#         current_seed = seeds.pop()\n        \n#         for m in mappings:\n#             mapping_range = (m.source, m.source + m.length - 1)\n\n#             # Seed is entirely out of mapping range\n#             if (current_seed[0] &lt; mapping_range[0]) and (current_seed[1] &lt; mapping_range[0]):\n#                 continue\n            \n#             # Seed is entirely in mapping range\n#             elif (current_seed[0] &gt;= mapping_range[0]) and (current_seed[1] &lt;= mapping_range[1]):\n#                 new_start = current_seed[0] + m.dest - m.source\n#                 new_stop = current_seed[1] + m.dest - m.source\n#                 converted_seeds.append((new_start, new_stop))\n#                 break\n            \n#             # Seed is partially in mapping range\n#             # 4 5 6 (4,6)\n#             # 5 6 7 (5,7)\n#             elif (current_seed[0] &lt; mapping_range[0]) and (current_seed[1] &lt; mapping_range[1]):\n#                overlap_start = mapping_range[0]\n#                overlap_end = current_seed[1]\n#                new_start = overlap_start + m.dest - m.source\n#                new_stop = overlap_end + m.dest - m.source\n#                converted_seeds.append((new_start, new_stop))\n#                seeds.append((current_seed[0],mapping_range[0]-1))\n#                seeds.append((current_seed[1]+1, mapping_range[1]))\n#                break\n\n#             elif (current_seed[0] &gt; mapping_range[0]) and (current_seed[1] &gt; mapping_range[1]):\n#                overlap_start = current_seed[0]\n#                overlap_end = mapping_range[1]\n#                new_start = overlap_start + m.dest - m.source\n#                new_stop = overlap_end + m.dest - m.source\n#                converted_seeds.append((new_start, new_stop))\n#                seeds.append((mapping_range[0],current_seed[0]-1))\n#                seeds.append((mapping_range[1]+1, current_seed[1]))\n#                break \n               \n\n#         else:\n#             # We have gone through all mappings, keep seed unchange\n#             converted_seeds.append(current_seed)\n#     return converted_seeds\n\n# def part2(inp:str) -&gt; int:\n#     seeds = parse_seeds2(inp)\n#     seed_to_soil = parse_mapping(inp, pattern=r\"seed-to-soil map:\\n([\\S\\s]*?)soil\")\n#     soil_to_fertilizer = parse_mapping(inp, pattern=r\"soil-to-fertilizer map:\\n([\\S\\s]*?)fertilizer\")\n#     print(soil_to_fertilizer)\n#     fertilizer_to_water = parse_mapping(inp, pattern=r\"fertilizer-to-water map:\\n([\\S\\s]*?)water\")\n#     water_to_light = parse_mapping(inp, pattern=r\"water-to-light map:\\n([\\S\\s]*?)light\")\n#     light_to_temp = parse_mapping(inp, pattern=r\"light-to-temperature map:\\n([\\S\\s]*?)temperature\")\n#     temp_to_humidity = parse_mapping(inp, pattern=r\"temperature-to-humidity map:\\n([\\S\\s]*?)humidity\")\n#     humidity_to_location = parse_mapping(inp, pattern=r\"humidity-to-location map:\\n([\\S\\s]*?)\")\n\n#     soil = convert2(seeds, seed_to_soil)\n#     fertilizer = convert2(soil, soil_to_fertilizer)\n#     print(fertilizer)\n    # water = convert2(fertilizer, fertilizer_to_water)\n    # light = convert2(water, water_to_light)\n    # temp = convert2(light, light_to_temp)\n    # humidity = convert2(temp, temp_to_humidity)\n    # location = convert2(humidity, humidity_to_location)\n\n    # return min([start for start,stop in location])\n\n4 5 6 4 5 6 7 8"
  },
  {
    "objectID": "day/05/index.html#til",
    "href": "day/05/index.html#til",
    "title": "Day 5: If You Give A Seed A Fertilizer",
    "section": "TIL",
    "text": "TIL\ndef convert2(seeds:List[range], mappings:List[Mapping])-&gt; List[range]:\n#     for m in mappings:\n#         converted_seeds = []\n#         while len(seeds) &gt; 0:\n#             current_seed = seeds.pop()\n#             mapping_range = range(m.source, m.source + m.length)\n\n#             # 4,5 -- 4,5,6,7,8\n#             # seed.start = 4, seed.stop=6\n#             # map.start =4, map.stop=9\n#             if current_seed.start == mapping_range.start:\n#                 converted_seeds.append(range(current_seed.start+m.dest-m.source, current_seed.stop+m.dest-m.source))\n#                 seeds.append()\n\n    \n#     converted_seeds = []\n    \n#     while len(seeds)&gt;0:\n#         current_seed = seeds.pop()\n#         print(current_seed)\n\n#         for m in mappings:\n#             mapping_range = range(m.source, m.source+m.length)\n#             print(mapping_range)\n#             overlap_set = set(current_seed).intersection(mapping_range)\n            \n#             # Seed range is entirely within mapping range\n#             if len(overlap_set)==(current_seed.stop - current_seed.start):\n#                 new_start = current_seed.start + m.dest - m.source\n#                 new_stop = current_seed.stop + m.dest - m.source\n#                 converted_seeds.append(range(new_start, new_stop))\n            \n#             # No overlap\n#             elif len(overlap_set)==0:\n#                 print(overlap_set)\n#                 converted_seeds.append(current_seed)\n\n#             # Partial overlap\n#             elif len(overlap_set) &lt; (current_seed.stop - current_seed.start):\n#                 if min(overlap_set) == mapping_range.start:\n#                     new_start = min(overlap_set) + m.dest - m.source\n#                     new_stop = max(overlap_set) + m.dest - m.source\n#                     converted_seeds.append(range(new_start, new_stop))\n#                     seeds.append(range(max(overlap_set)+1, mapping_range.stop))\n#                 if max(overlap_set) == mapping_range.stop:\n#                     new_start = min(overlap_set) + m.dest - m.source\n#                     new_stop = max(overlap_set) + m.dest - m.source\n#                     converted_seeds.append(range(new_start, new_stop))\n#                     seeds.append(range(mapping_range.start, min(overlap_set)))\n#                 else:\n#                     new_start = min(overlap_set) + m.dest - m.source\n#                     new_stop = max(overlap_set) + m.dest - m.source\n#                     converted_seeds.append(range(new_start, new_stop))\n#                     seeds.append(range(mapping_range.start, min(overlap_set)))\n#                     seeds.append(range(max(overlap_set)+1, mapping_range.stop))\n            \n#     return converted_seeds\n\n([\\S\\s]*?) matches all characters including \\n between to strings\n\ns = \"\"\"seed-to-soil map:\n50 98 2\n52 50 48\n\nsoil-to-fertilizer map:\"\"\"\n\npattern = r\"seed-to-soil map:\\n([\\S\\s]*?)soil\"\nr = re.findall(pattern,s)\nprint(r)\n\n['50 98 2\\n52 50 48\\n\\n']\n\n\n\n( and ): These parentheses are used to create a capturing group, which allows you to extract the matched portion of the text.\n[]: This character class matches any non-whitespace character () or any whitespace character (). Essentially, it matches any character, including whitespace.\n?: The asterisk () is a quantifier that matches zero or more occurrences of the preceding element. The question mark (?) makes the quantifier lazy, meaning it will match as few characters as possible while still allowing the overall match to succeed.\n\n\n\nnamedtuple provides a convenient way to build a tiny dataclass\n\nfrom collections import namedtuple\n\n# Create a namedtuple type, Point. Namedtuples are immutable.\nPoint = namedtuple(\"Point\", \"x y\")\n\n# Instantiate the new type\npoint = Point(2, 4)\npoint\nPoint(x=2, y=4)\n\n# Access params using dot notation\nprint(f\"{point.x = }\")\nprint(f\"{point.y = }\")\n\n# Or using index\nprint(f\"{point[0] = }\")\nprint(f\"{point[1] = }\")\n\npoint.x = 2\npoint.y = 4\npoint[0] = 2\npoint[1] = 4\n\n\n\n\nFinding intersection between ranges using set.intersection\n\na = range(3,6)\nb = range(4,9)\nset(a).intersection(b)\n\n{4, 5}"
  }
]