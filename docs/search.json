[
  {
    "objectID": "day/01/index.html#part-1",
    "href": "day/01/index.html#part-1",
    "title": "Day 1: Trebuchet?!",
    "section": "Part 1",
    "text": "Part 1\nThe newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.\nFor example:\n1abc2\npqr3stu8vwx\na1b2c3d4e5f\ntreb7uchet\nIn this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.\nConsider your entire calibration document. What is the sum of all of the calibration values?\n\nfrom typing import List\n\nexample = [\"1abc2\",\n    \"pqr3stu8vwx\",\n    \"a1b2c3d4e5f\",\n    \"treb7uchet\"]\n\ndef get_num(s:str) -&gt; int:\n    nums = [ch for ch in [*s] if ch.isdigit()]\n    return int(nums[0]+nums[-1])\n\ndef calibration_sum(inp:List[str]) -&gt; int:\n    nums = map(get_num, inp)\n    return sum(nums)\n\ncalibration_sum(example)\n\n142\n\n\n\nwith open(\"./input.txt\") as f:\n    inp = f.read().splitlines()\n\ncalibration_sum(inp)\n\n55488"
  },
  {
    "objectID": "day/01/index.html#part-2",
    "href": "day/01/index.html#part-2",
    "title": "Day 1: Trebuchet?!",
    "section": "Part 2",
    "text": "Part 2\nYour calculation isn‚Äôt quite right. It looks like some of the digits are actually spelled out with letters: one, two, three, four, five, six, seven, eight, and nine also count as valid ‚Äúdigits‚Äù.\nEquipped with this new information, you now need to find the real first and last digit on each line. For example:\neightwothree\nabcone2threexyz\nxtwone3four\n4nineeightseven2\nzoneight234\n7pqrstsixteen\nIn this example, the calibration values are 29, 83, 13, 24, 42, 14, and 76. Adding these together produces 281.\nWhat is the sum of all of the calibration values?\n\nMAPPINGS = {\n    \"one\":\"1\",\n    \"two\":\"2\",\n    \"three\":\"3\",\n    \"four\":\"4\",\n    \"five\":\"5\",\n    \"six\":\"6\",\n    \"seven\":\"7\",\n    \"eight\":\"8\",\n    \"nine\":\"9\"\n}\n\nexample2 = [\n    \"two1nine\",\n    \"eightwothree\",\n    \"abcone2threexyz\",\n    \"xtwone3four\",\n    \"4nineeightseven2\",\n    \"zoneight234\",\n    \"7pqrstsixteen\"\n    ]\n\n\ndef parse_num(s:str, direction:bool) -&gt; str:\n    curr = \"\"\n\n    # Forward direction = True\n    if direction:\n        for ch in s:\n            if ch.isdigit():\n                return ch\n            else:\n                curr += ch \n                for k,v in MAPPINGS.items():\n                    if k in curr:\n                        return v\n    # Reverse direction\n    else:\n        for ch in reversed(s):\n            if ch.isdigit():\n                return ch\n            else:\n                curr = ch + curr \n                for k,v in MAPPINGS.items():\n                    if k in curr:\n                        return v\n\nprint(parse_num(\"eightwothree\", True))\nprint(parse_num(\"eightwothree\", False))\n\n8\n3\n\n\n\ndef get_num2(s:str) -&gt; int:\n    first = parse_num(s, True)\n    last = parse_num(s, False)\n    return int(first + last)\n\ndef calibration_sum2(inp:List[str]) -&gt; int:\n    nums = map(get_num2, inp)\n    return sum(nums)\n\ncalibration_sum2(example2)\n\n281\n\n\n\ncalibration_sum2(inp)\n\n55614"
  },
  {
    "objectID": "day/01/index.html#til",
    "href": "day/01/index.html#til",
    "title": "Day 1: Trebuchet?!",
    "section": "TIL",
    "text": "TIL\n\n[*string] converts a string into a list of elements\n\ns = \"1abc2\"\n[*s]\n\n['1', 'a', 'b', 'c', '2']"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "üéÖüèº Advent of Code 2023",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nDay 1: Trebuchet?!\n\n\n\n\n\n\n\n\n\n\n\nDay 2: Cube Conundrum\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "day/02/index.html",
    "href": "day/02/index.html",
    "title": "Day 2: Cube Conundrum",
    "section": "",
    "text": "As you walk, the Elf shows you a small bag and some cubes which are either red, green, or blue. Each time you play this game, he will hide a secret number of cubes of each color in the bag, and your goal is to figure out information about the number of cubes.\nTo get information, once a bag has been loaded with cubes, the Elf will reach into the bag, grab a handful of random cubes, show them to you, and then put them back in the bag. He‚Äôll do this a few times per game.\nYou play several games and record the information from each game (your puzzle input). Each game is listed with its ID number (like the 11 in Game 11: ‚Ä¶) followed by a semicolon-separated list of subsets of cubes that were revealed from the bag (like 3 red, 5 green, 4 blue).\nFor example, the record of a few games might look like this:\nGame 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\nIn game 1, three sets of cubes are revealed from the bag (and then put back again). The first set is 3 blue cubes and 4 red cubes; the second set is 1 red cube, 2 green cubes, and 6 blue cubes; the third set is only 2 green cubes.\nThe Elf would first like to know which games would have been possible if the bag contained only 12 red cubes, 13 green cubes, and 14 blue cubes?\nIn the example above, games 1, 2, and 5 would have been possible if the bag had been loaded with that configuration. However, game 3 would have been impossible because at one point the Elf showed you 20 red cubes at once; similarly, game 4 would also have been impossible because the Elf showed you 15 blue cubes at once. If you add up the IDs of the games that would have been possible, you get 8.\nDetermine which games would have been possible if the bag had been loaded with only 12 red cubes, 13 green cubes, and 14 blue cubes. What is the sum of the IDs of those games?"
  },
  {
    "objectID": "day/02/index.html#part-1",
    "href": "day/02/index.html#part-1",
    "title": "Day 2: Cube Conundrum",
    "section": "Part 1",
    "text": "Part 1\nAs you walk, the Elf shows you a small bag and some cubes which are either red, green, or blue. Each time you play this game, he will hide a secret number of cubes of each color in the bag, and your goal is to figure out information about the number of cubes.\nTo get information, once a bag has been loaded with cubes, the Elf will reach into the bag, grab a handful of random cubes, show them to you, and then put them back in the bag. He‚Äôll do this a few times per game.\nYou play several games and record the information from each game (your puzzle input). Each game is listed with its ID number (like the 11 in Game 11: ‚Ä¶) followed by a semicolon-separated list of subsets of cubes that were revealed from the bag (like 3 red, 5 green, 4 blue).\nFor example, the record of a few games might look like this:\nGame 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\nIn game 1, three sets of cubes are revealed from the bag (and then put back again). The first set is 3 blue cubes and 4 red cubes; the second set is 1 red cube, 2 green cubes, and 6 blue cubes; the third set is only 2 green cubes.\nThe Elf would first like to know which games would have been possible if the bag contained only 12 red cubes, 13 green cubes, and 14 blue cubes?\nIn the example above, games 1, 2, and 5 would have been possible if the bag had been loaded with that configuration. However, game 3 would have been impossible because at one point the Elf showed you 20 red cubes at once; similarly, game 4 would also have been impossible because the Elf showed you 15 blue cubes at once. If you add up the IDs of the games that would have been possible, you get 8.\nDetermine which games would have been possible if the bag had been loaded with only 12 red cubes, 13 green cubes, and 14 blue cubes. What is the sum of the IDs of those games?\n\nimport re\nimport polars as pl\nfrom typing import List\n\ndef colour_regex(colour:str, text:str) -&gt; int:\n    search = re.search(rf\"(\\d+) {colour}\", text)\n    if search is None:\n        return 0\n    return int(search.group(1))\n\n\ndef parse(inp: List[str]) -&gt; pl.DataFrame:\n    game_ids = []\n    blue = []\n    red = []\n    green = []\n\n    for s in inp:\n        game_id = int(s.split(\": \")[0].split(\" \")[1])\n        subsets = s.split(\": \")[1].split(\"; \")\n        for subset in subsets:\n            game_ids.append(game_id)\n            blue.append(colour_regex(\"blue\", subset))\n            red.append(colour_regex(\"red\", subset))\n            green.append(colour_regex(\"green\", subset))\n\n    return pl.DataFrame({\n        \"game_id\" : game_ids,\n        \"blue\" : blue,\n        \"red\": red,\n        \"green\": green\n    })\n\n\nexample = [\n    \"Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\",\n    \"Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\",\n    \"Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\",\n    \"Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\",\n    \"Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\"\n]\n\nparse(example)\n\n\nshape: (14, 4)\n\n\n\ngame_id\nblue\nred\ngreen\n\n\ni64\ni64\ni64\ni64\n\n\n\n\n1\n3\n4\n0\n\n\n1\n6\n1\n2\n\n\n1\n0\n0\n2\n\n\n2\n1\n0\n2\n\n\n2\n4\n1\n3\n\n\n2\n1\n0\n1\n\n\n3\n6\n20\n8\n\n\n3\n5\n4\n13\n\n\n3\n0\n1\n5\n\n\n4\n6\n3\n1\n\n\n4\n0\n6\n3\n\n\n4\n15\n14\n3\n\n\n5\n1\n6\n3\n\n\n5\n2\n1\n2\n\n\n\n\n\n\n\ndef part1(df:pl.DataFrame, red:int, green:int, blue:int) -&gt; int:\n    \"\"\"\n    Input:\n    - `df` : A DataFrame with every subset shown\n    - Known true values of red, green and blue cubes\n    \n    Output: the sum of unique game_ids after filtering out impossible subsets\n    \"\"\"\n\n    invalid = (df\n        .filter((pl.col(\"blue\") &gt; blue) | (pl.col(\"red\") &gt; red) | (pl.col(\"green\") &gt; green))\n        .select(pl.col(\"game_id\").unique())\n        )\n    \n    valid = (df\n        .select(pl.col(\"game_id\").unique())\n        .join(invalid, on=\"game_id\", how=\"anti\")\n    )\n    \n    return valid.select(pl.col(\"game_id\").sum()).item()\n\npart1(df = parse(example), red =12, green=13, blue=14)\n\n8\n\n\n\nwith open(\"./input.txt\") as f:\n    inp = f.read().splitlines()\n\npart1(df = parse(inp), red =12, green=13, blue=14)\n\n2913"
  },
  {
    "objectID": "day/02/index.html#part-2",
    "href": "day/02/index.html#part-2",
    "title": "Day 2: Cube Conundrum",
    "section": "Part 2",
    "text": "Part 2\nThe Elf says they‚Äôve stopped producing snow because they aren‚Äôt getting any water! He isn‚Äôt sure why the water stopped; however, he can show you how to get to the water source to check it out for yourself. It‚Äôs just up ahead!\nAs you continue your walk, the Elf poses a second question: in each game you played, what is the fewest number of cubes of each color that could have been in the bag to make the game possible?\nAgain consider the example games from earlier:\nGame 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\n\nIn game 1, the game could have been played with as few as 4 red, 2 green, and 6 blue cubes. If any color had even one fewer cube, the game would have been impossible.\nGame 2 could have been played with a minimum of 1 red, 3 green, and 4 blue cubes.\nGame 3 must have been played with at least 20 red, 13 green, and 6 blue cubes.\nGame 4 required at least 14 red, 3 green, and 15 blue cubes.\nGame 5 needed no fewer than 6 red, 3 green, and 2 blue cubes in the bag.\n\nThe power of a set of cubes is equal to the numbers of red, green, and blue cubes multiplied together. The power of the minimum set of cubes in game 1 is 48. In games 2-5 it was 12, 1560, 630, and 36, respectively. Adding up these five powers produces the sum 2286.\nFor each game, find the minimum set of cubes that must have been present. What is the sum of the power of these sets?\n\ndef part2(df:pl.DataFrame, red:int, green:int, blue:int) -&gt; int:\n    max_n_per_colour = df.group_by(\"game_id\").agg(\n        pl.col(\"blue\").max(),\n        pl.col(\"red\").max(),\n        pl.col(\"green\").max()\n    )\n\n    return (max_n_per_colour\n        .select(pl.col(\"blue\") * pl.col(\"red\") * pl.col(\"green\"))\n        .sum()\n        )\n\nprint(part2(df = parse(example), red =12, green=13, blue=14))\n\nprint(part2(df = parse(inp), red =12, green=13, blue=14))\n\nshape: (1, 1)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ blue ‚îÇ\n‚îÇ ---  ‚îÇ\n‚îÇ i64  ‚îÇ\n‚ïû‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï°\n‚îÇ 2286 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\nshape: (1, 1)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ blue  ‚îÇ\n‚îÇ ---   ‚îÇ\n‚îÇ i64   ‚îÇ\n‚ïû‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï°\n‚îÇ 55593 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
  },
  {
    "objectID": "day/02/index.html#til",
    "href": "day/02/index.html#til",
    "title": "Day 2: Cube Conundrum",
    "section": "TIL",
    "text": "TIL\n\nYou can combine f and r strings\n\n# regex string example\nr1 = re.search(r\"(\\d+) blue\", \"3 blue, 4 red\").group(1)\nprint(f\"{r1 =}\")\n\n# combining regex and f string for string interpolation\ncolour = \"blue\"\nr2 = re.search(rf\"(\\d+) {colour}\", \"3 blue, 4 red\").group(1)\nprint(f\"{r2 =}\")\n\nr1 ='3'\nr2 ='3'\n\n\n\n\nanti joins in polars\ndf.join(invalid, on=\"game_id\", how=\"anti\")\n\n\n.item() to retrieve value of cell from polars Dataframe\nvalid.select(pl.col(\"game_id\").sum()).item()"
  }
]