---
title: "Day 1: Trebuchet?!"
---
![](https://upload.wikimedia.org/wikipedia/commons/2/2e/Trebuchet.jpg)

## Part 1
The newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.

For example:
```
1abc2
pqr3stu8vwx
a1b2c3d4e5f
treb7uchet
```
In this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.

Consider your entire calibration document. What is the sum of all of the calibration values?

```{python}
from typing import List

example = ["1abc2",
    "pqr3stu8vwx",
    "a1b2c3d4e5f",
    "treb7uchet"]

def get_num(s:str) -> int:
    nums = [ch for ch in [*s] if ch.isdigit()]
    return int(nums[0]+nums[-1])

def calibration_sum(inp:List[str]) -> int:
    nums = map(get_num, inp)
    return sum(nums)

calibration_sum(example)
```

```{python}
with open("./input.txt") as f:
    inp = f.read().splitlines()

calibration_sum(inp)
```

## Part 2
Your calculation isn't quite right. It looks like some of the digits are actually spelled out with letters: one, two, three, four, five, six, seven, eight, and nine also count as valid "digits".

Equipped with this new information, you now need to find the real first and last digit on each line. For example:

```two1nine
eightwothree
abcone2threexyz
xtwone3four
4nineeightseven2
zoneight234
7pqrstsixteen
```
In this example, the calibration values are 29, 83, 13, 24, 42, 14, and 76. Adding these together produces 281.

What is the sum of all of the calibration values?

```{python}
MAPPINGS = {
    "one":"1",
    "two":"2",
    "three":"3",
    "four":"4",
    "five":"5",
    "six":"6",
    "seven":"7",
    "eight":"8",
    "nine":"9"
}

example2 = [
    "two1nine",
    "eightwothree",
    "abcone2threexyz",
    "xtwone3four",
    "4nineeightseven2",
    "zoneight234",
    "7pqrstsixteen"
    ]


def parse_num(s:str, direction:bool) -> str:
    curr = ""

    # Forward direction = True
    if direction:
        for ch in s:
            if ch.isdigit():
                return ch
            else:
                curr += ch 
                for k,v in MAPPINGS.items():
                    if k in curr:
                        return v
    # Reverse direction
    else:
        for ch in reversed(s):
            if ch.isdigit():
                return ch
            else:
                curr = ch + curr 
                for k,v in MAPPINGS.items():
                    if k in curr:
                        return v

print(parse_num("eightwothree", True))
print(parse_num("eightwothree", False))
```

```{python}
def get_num2(s:str) -> int:
    first = parse_num(s, True)
    last = parse_num(s, False)
    return int(first + last)

def calibration_sum2(inp:List[str]) -> int:
    nums = map(get_num2, inp)
    return sum(nums)

calibration_sum2(example2)
```

```{python}
calibration_sum2(inp)
```

## TIL
### `[*string]` converts a string into a list of elements
```{python}
s = "1abc2"
[*s]
```